{
  "name": "ambilight",
  "version": "0.0.5",
  "contributors": [
    {
      "name": "Maximilian Schremser",
      "email": "maxi@schremser.com"
    }
  ],
  "engines": {
    "nodejs": ">= 0.8.0"
  },
  "license": "MIT",
  "private": false,
  "main": "index.js",
  "script": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/maxschremser/ambilight.git"
  },
  "bugs": {
    "url": "https://github.com/maxschremser/ambilight/issues"
  },
  "dependencies": {
    "q": "~1.0.0",
    "traits": "~0.4.0",
    "node-hue-api": "~0.2.6"
  },
  "devDependencies": {
    "mocha": "~1.20.1",
    "chai": "~1.9.1"
  },
  "keywords": [
    "philips",
    "api",
    "light",
    "ambilight"
  ],
  "readme": "# Node Hue Ambilight API\n\nAn API library for Node.js that interacts with the Philips Hue Bridge to control Philips Hue Light Bulbs and\nPhilips Living Color Lamps and Philips Ambilight REST Service.\n\nThis library abstracts away the actual Philips Hue Bridge REST API and provides all of the features of the Phillips API and\na number of useful functions to control the lights and bridge remotely.\n\nThe library has undergone a large update for version ``0.2.x``, where it now supports ``callbacks`` and Q ``promises`` for the\nfunctions of the API.\nSo for each function in the API, if a callback is provided, then a callback will be used to return any results\nor notification of success, in a true Node.js fashion. If the callback is omitted then a promise will be returned for\nuse in chaining or in most cases simpler handling of the results.\n\nWhen using Q ``promises``, it is necessary to call ``done()`` on any promises that are returned, otherwise errors can be\nswallowed silently.\n\n## Change Log\nFor a list of changes, please refer to the change log;\n[Changes](Changelog.md)\n\nPlease note that a number of breaking changes have occurred in moving from version 0.1.x to 0.2.x, but these were necessary to\nprovide more consistency in the API and to ensure that moving forward the library will be able to better adjust to changes\nin the firmware of the Phillips Hue Bridge.\n\n\n## Work In Progress\nThere is still some work to be done around completing the ability to define schedules in a bette way that properly\nvalidates the command that is to be run as part of the schedule. With the changes introduced in version ``0.2.0`` of this\nlibrary it should be easier to accomplish in an upcoming release.\n\nThe public API as of version 0.2.0+ is close to complete (at least for the current version of the Phillips Hue Bridge firmware),\nand as such there will be no breaking changes to the library that has occurred in moving from version ``0.1.x`` to ``0.2.x``.\n\n\n## Philips Hue Resources\n\nThere are a number of resources where users have detailed documentation on the Philips Hue Bridge;\n - The Official Phillips Hue Documentation <http://developers.meethue.com/index.html>\n - Unofficial Hue Documentation: <http://burgestrand.github.com/hue-api/>\n - Hack the Hue: <http://rsmck.co.uk/hue>\n - Hue Hackers Mailing List: <https://groups.google.com/forum/#!forum/hue-hackers>\n\n\n## Installation\n\nNodeJS application using npm:\n```\n$ npm install node-hue-api\n```\n\n## Examples\n\n### Locating a Philips Hue Bridge\nThere are two functions available to find the Phillips Hue Bridges on the network ``locateBridges()`` and ``searchForBridges()``.\nBoth of these methods are useful if you do not know the IP Address of the bridge already.\n\n### locateBridges()\nThis API function makes use of the official API endpoint that reveals the bridges on a network. It is a call through to\n``http://meethue.com/api/nupnp`` which may not work in all circumstances, in which case you can fall back to the old function\n``searchForBridges()``.\n\nThis function is considerably faster to resolve the bridges < 500ms compared to 5 seconds to perform a full search on my\nown network.\n\n```js\nvar hue = require(\"node-hue-api\");\n\nvar displayBridges = function(bridge) {\n\tconsole.log(\"Hue Bridges Found: \" + JSON.stringify(bridge));\n};\n\n// --------------------------\n// Using a promise\nhue.locateBridges().then(displayBridges).done();\n\n// --------------------------\n// Using a callback\nhue.locateBridges(function(err, result) {\n\tif (err) throw err;\n\tdisplayBridges(result);\n});\n```\n\nThe results from this call will be of the form;\n```\nHue Bridges Found: [{\"id\":\"001788fffe096103\",\"ipaddress\":\"192.168.2.129\"}]\n```\n\n\n#### searchForBridges()\nThis API function utilizes a network scan for the SSDP responses of devices on a network. It is the only method that does not\nsupport callbacks, and is only in the API as a fallback since Phillips provided a quicker discovery method once the API was\nofficially released.\n\n```js\nvar hue = require(\"node-hue-api\"),\n\ttimeout = 2000; // 2 seconds\n\nvar displayBridges = function(bridge) {\n\tconsole.log(\"Hue Bridges Found: \" + JSON.stringify(bridge));\n};\n\nhue.searchForBridges(timeout).then(displayBridges).done();\n```\nA timeout can be provided to the function to increase/decrease the amount of time that it waits for responses from the\nsearch request, by default this is set to 5 seconds (the above example sets this to 2 seconds).\n\nThe results from this function call will be of the form;\n```\nHue Bridges Found: [{\"id\":\"001788096103\",\"ipaddress\":\"192.168.2.129\"}]\n```\n\n\n### Registering a new Device/User with the Bridge\nOnce you have discovered the IP Address for your bridge (either from the locate/search function, or looking it up on the\nPhilips Hue website), then you will need to register your application with the Hue Bridge.\n\nRegistration requires you to issue a request to the Bridge after pressing the Link Button on the Bridge (although you can\nnow do this via the API too if you already have an existing user account on the Bridge).\n\nThs library offer two functions to register new devices/users with the Hue Bridge. These are detailed below.\n\n\n### Bridge Configuration\nYou can obtain a summary of the configuration of the Bridge using the ``config()`` or ``connect()`` functions;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar hostname = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api;\n\napi = new HueApi(hostname, username);\n\n// --------------------------\n// Using a promise\napi.connect().then(displayResult).done();\n\n// --------------------------\n// Using a callback\napi.connect(function(err, config) {\n    if (err) throw err;\n    displayResult(config);\n});\n```\n\nThis will provide results detailing the configuration of the bridge (IP Address, Name, Link Button Status, Defined Users, etc...);\n```\n{\n  \"name\": \"Philips hue\",\n  \"mac\": \"00:x:xx:xx:xx:xx\",\n  \"dhcp\": true,\n  \"ipaddress\": \"192.168.2.129\",\n  \"netmask\": \"255.255.255.0\",\n  \"gateway\": \"192.168.2.1\",\n  \"proxyaddress\": \"none\",\n  \"proxyport\": 0,\n  \"UTC\": \"2013-06-15T13:20:08\",\n  \"whitelist\": {\n    \"51780342fd7746f2fb4e65c30b91d7\": {\n      \"last use date\": \"2013-05-29T20:29:51\",\n      \"create date\": \"2013-05-29T20:29:51\",\n      \"name\": \"Node.js API\"\n    },\n    \"08a902b95915cdd9b75547cb50892dc4\": {\n      \"last use date\": \"1987-01-06T22:53:37\",\n      \"create date\": \"2013-04-02T13:39:18\",\n      \"name\": \"Node Hue Api Tests User\"\n    }\n  },\n  \"swversion\": \"01005825\",\n  \"swupdate\": {\n    \"updatestate\": 0,\n    \"url\": \"\",\n    \"text\": \"\",\n    \"notify\": false\n  },\n  \"linkbutton\": false,\n  \"portalservices\": true\n}\n```\n\nIf you invoke the ``config()`` or ``connect()`` functions with an invalid user account (i.e. one that is not valid) then\nresults of the name and software version will be returned from the bridge with no other information;\n```\n{\n  \"name\": \"Philips hue\",\n  \"swversion\": \"01005825\"\n}\n```\nFor this reason, if you want to validate that the user account used to connect to the bridge is correct, you will have to\nlook for a field that is not present in the above result, like the ``mac``, ``ipaddress`` or ``linkbutton`` would be good\nproperties to check.\n\n\n### Registering without an existing Device/User ID\nA user can be registered on the Bridge using ``registerUser()`` or ``createUser()`` functions. This is useful when you have not got\nan existing user account on the Bridge to use to access its protected functions.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar hostname = \"192.168.2.129\",\n    newUserName = null // You can provide your own username value, but it is normally easier to leave it to the Bridge to create it\n    userDescription = \"device description goes here\";\n\nvar displayUserResult = function(result) {\n    console.log(\"Created user: \" + JSON.stringify(result));\n};\n\nvar displayError = function(err) {\n    console.log(err);\n};\n\nvar hue = new HueApi();\n\n// --------------------------\n// Using a promise\nhue.registerUser(hostname, newUserName, userDescription)\n    .then(displayUserResult)\n    .fail(displayError)\n    .done();\n\n// --------------------------\n// Using a callback (with default description and auto generated username)\nhue.createUser(hostname, null, null, function(err, user) {\n\tif (err) throw err;\n\tdisplayUserResult(user);\n});\n```\n\nIf the username value passed in to register a new user is ``null`` or ``undefined`` then the Hue Bridge will create a\nnew user with a generated username. It is suggested to allow the bridge to generate this for you automatically.\n\nThe description for the user account is also optional, if you do nto provide one, then the default of \"Node.js API\" will be set.\n\nThere is a convenience method, if you have a existing user account when you register a new user, that will programmatically\npress the link button for you. See the details for the function ``pressLinkButton()`` for more details.\n\n\n#### Registration Output/Error\nWhen registering a new user you will get the username created, or an error that will likely be due to not pressing the\nlink button on the Bridge.\n\nIf the link button was NOT pressed on the bridge, then you will get an ``ApiError`` thrown, which will be captured by the displayError function in the above examples.\n```\nApi Error: link button not pressed\n```\n\nIf the link button was pressed you should get a response that will provide you with a hash to use as the username for connecting with the Hue Bridge, e.g.\n```\n033a6feb77750dc770ec4a4487a9e8db\n```\n\n\n### Validating a Connection to a Philips Hue Bridge\nTo connect to a Philips Hue Bridge and obtain some basic details about it you can use the ``connect()`` or ``config()``\nfunctions which were detailed above.\n\n\n### Obtaining the Complete State of the Bridge\nIf you have a valid user account in the Bridge, then you can obtain the complete status of the bridge using ``getFullState()``.\nThis function is computationally expensive on the bridge and should not be invoked frequently.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar hostname = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api;\n\napi = new HueApi(hostname, username);\n\n// --------------------------\n// Using a promise\napi.getFullState().then(displayResult).done();\n\n// --------------------------\n// Using a callback\napi.getFullState(function(err, config) {\n    if (err) throw err;\n    displayResult(config);\n});\n```\nThis will produce a JSON response similar to the following (large parts have been removed from the result below);\n```\n{\n  \"lights\": {\n    \"5\": {\n      \"state\": {\n        \"on\": false,\n        \"bri\": 0,\n        \"hue\": 6144,\n        \"sat\": 254,\n        \"xy\": [\n          0.6376,\n          0.3563\n        ],\n        \"alert\": \"none\",\n        \"effect\": \"none\",\n        \"colormode\": \"hs\",\n        \"reachable\": true\n      },\n      \"type\": \"Color light\",\n      \"name\": \"Living Color TV\",\n      \"modelid\": \"LLC007\",\n      \"swversion\": \"4.6.0.8274\",\n      \"pointsymbol\": {\n        \"1\": \"none\",\n        \"2\": \"none\",\n        \"3\": \"none\",\n        \"4\": \"none\",\n        \"5\": \"none\",\n        \"6\": \"none\",\n        \"7\": \"none\",\n        \"8\": \"none\"\n      }\n    }\n  },\n  \"groups\": {\n    \"1\": {\n      \"action\": {\n        \"on\": false,\n        \"bri\": 63,\n        \"hue\": 65527,\n        \"sat\": 253,\n        \"xy\": [\n          0.6736,\n          0.3221\n        ],\n        \"ct\": 500,\n        \"effect\": \"none\",\n        \"colormode\": \"ct\"\n      },\n      \"lights\": [\n        \"1\",\n        \"2\",\n        \"3\"\n      ],\n      \"name\": \"NodejsApiTest\"\n    }\n  },\n  \"config\": {\n  \t...\n  \t\"whitelist\": {\n          \"51780342fd7746f2fb4e65c30b91d7\": {\n            \"last use date\": \"2013-05-29T20:29:51\",\n            \"create date\": \"2013-05-29T20:29:51\",\n            \"name\": \"Node.js API\"\n          },\n          \"08a902b95915cdd9b75547cb50892dc4\": {\n            \"last use date\": \"1987-01-06T22:53:37\",\n            \"create date\": \"2013-04-02T13:39:18\",\n            \"name\": \"Node Hue Api Tests User\"\n          }\n        },\n\t\"swversion\": \"01005825\"\n\t...\n  },\n  \"schedules\": {\n    \"1\": {\n      \"name\": \"Updated Name\",\n      \"description\": \"Like anyone really needs a wake up on Xmas day...\",\n      \"command\": {\n        \"address\": \"/api/08a902b95915cdd9b75547cb50892dc4/lights/5/state\",\n        \"body\": {\n          \"on\": true\n        },\n        \"method\": \"PUT\"\n      },\n      \"time\": \"2014-01-01T07:00:30\",\n      \"created\": \"1970-01-01T00:00:00\"\n    }\n  },\n  \"scenes\": {}\n```\n\n### Obtaining Registered Users/Devices\nTo obtain the details for all the registered users/devices for a Hue Bridge you can use the ``registeredUsers()`` function.\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar hostname = \"192.168.2.129\";\nvar username = \"08a902b95915cdd9b75547cb50892dc4\";\nvar api = new HueApi(hostname, username);\n\n// --------------------------\n// Using a promise\napi.registeredUsers().then(displayResult).done();\n\n// --------------------------\n// Using a callback\napi.registeredUsers(function(err, config) {\n    if (err) throw err;\n    displayResult(config);\n});\n```\nThis will produce a JSON response that has a root key of \"devices\" that has an array of registered devices/users for the Bridge. An example of the result is shown below\n```\n{\n  \"devices\": [\n    {\n      \"name\": \"Node API\",\n      \"username\": \"083b2f780c78555d532b78544f135798\",\n      \"created\": \"2013-01-02T19:17:02\",\n      \"accessed\": \"2012-12-24T20:18:55\"\n    },\n    {\n      \"name\": \"iPad\",\n      \"username\": \"279c26146e3318997d69a8a66330b5f5\",\n      \"created\": \"2012-12-24T14:05:25\",\n      \"accessed\": \"2013-01-04T21:37:29\"\n    },\n    {\n      \"name\": \"iPhone\",\n      \"username\": \"fcb0a47cd664f0cbaa34d36def54577d\",\n      \"created\": \"2012-12-24T17:13:54\",\n      \"accessed\": \"2013-01-03T20:50:40\"\n    }\n  ]\n}\n````\n\n### Deleting a User/Device\nTo delete a user or device from the Bridge, you will need an existing user account to authenticate as, and then you can call\n``deleteUser()`` or ``unregisterUser()`` to remove a user from the Bridge Whitelist;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar hostname = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\";\n\nvar displayUserResult = function(result) {\n    console.log(\"Deleted user: \" + JSON.stringify(result));\n};\n\nvar displayError = function(err) {\n    console.log(err);\n};\n\nvar hue = new HueApi(hostname, username);\n\n// --------------------------\n// Using a promise\nhue.deleteUser(\"2b997aae306f15a734d8d1c2315d47cb\")\n    .then(displayUserResult)\n    .fail(displayError)\n    .done();\n\n// --------------------------\n// Using a callback\nhue.unregisterUser(\"1ab7d44219e64c373b4b915e34494443\", function(err, user) {\n    if (err) throw err;\n    displayUserResult(user);\n});\n```\nWhich will result in a ``true`` result if the user was removed, or an error if any other result occurs (i.e. the user does not exist) as shown below;\n```\n{\n\tmessage: 'resource, /config/whitelist/2b997aae306f15a734d8d1c2315d47cb, not available',\n\ttype: 3,\n\taddress: '/config/whitelist/2b997aae306f15a734d8d1c2315d47cb'\n}\n```\n\n\n## Finding the Lights Attached to the Bridge\nTo find all the lights that are registered with the Hue Bridge, so that you might be able to interact with them, you can use the ``lights()`` function.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api;\n\napi = new HueApi(host, username);\n\n// --------------------------\n// Using a promise\napi.lights()\n    .then(displayResult)\n    .done();\n\n// --------------------------\n// Using a callback\napi.lights(function(err, lights) {\n    if (err) throw err;\n    displayResult(lights);\n});\n```\n\nThis will output a JSON object that will provide details of the lights that the Hue Bridge knows about;\n```\n{\n  \"lights\": [\n    {\n      \"id\": \"1\",\n      \"name\": \"Lounge Living Color\"\n    },\n    {\n      \"id\": \"2\",\n      \"name\": \"Right Bedside\"\n    },\n    {\n      \"id\": \"3\",\n      \"name\": \"Left Bedside\"\n    },\n    {\n      \"id\": \"4\",\n      \"name\": \"Lounge Standing Lamp\"\n    }\n  ]\n}\n```\nThe \"id\" values are what you will need to use to interact with the light directly and set the states on it (like on/off, color, etc...).\n\n## Interacting with a Hue Light or Living Color Lamp\nThe library provides a function, __setLightState()__, that allows you to set the various states on a light connected to the Hue Bridge.\nYou can either provide a JSON object that contains the values to set the various state values, or you can use the provided __lightState__ object in the library to build the state object ot pass to the function. See below for examples.\n\n## Using LightState to Build States\nThe __lightState__ object provides a fluent way to build up a simple or complex light states that you can pass to a light.\n\nThe majority of the various states that you can set on a Hue Light or Living Color lamp are available from this object.\n\n### LightState Options\nThe __lightState__ object provides the following methods that can be used to build various states (all of which can be combined);\n\n- __on()__\n- __off()__\n- __alert()__ flash the light once\n- __alert(isLong)__ if isLong is true then the alert will flash 10 times\n- __white(colorTemp, brightPercent)__ where colorTemp is a value between 154 (cool) and 500 (warm) and brightPercent is 0 to 100\n- __brightness(percent)__ where percent is the brightness from 0 to 100\n- __hsl(hue, saturation, brightPercent)__ where hue is a value from 0 to 359, saturation is a percent value from 0 to 100, and brightPercent is from 0 to 100\n- __xy(x, y)__ where x and y is from 0 to 1 in the Philips Color co-ordinate system\n- __rgb(red, green, blue)__ where red, green and blue are values from 0 to 255 - Not all colors can be created by the lights\n- __transition(seconds)__ this can be used with another setting to create a transition effect (like change brightness over 10 seconds)\n- __effect(value)__ this can be set to 'colorloop' or 'none'. The 'colorloop' rotates through all available hues at the current saturation level\n\n### Creating Complex States\nThe LightState object provides a simple way to build up JSON object to set multiple values on a Hue Light.\n\nTo turn on a light and set it to a warm white color;\n```js\nvar hue = require(\"node-hue-api\"),\n    HueApi = hue.HueApi,\n    lightState = hue.lightState;\n\nvar displayResult = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username),\n    state;\n\n// Set light state to 'on' with warm white value of 500 and brightness set to 100%\nstate = lightState.create().on().white(500, 100);\n\n// --------------------------\n// Using a promise\napi.setLightState(5, state)\n    .then(displayResult)\n    .done();\n\n// --------------------------\n// Using a callback\napi.setLightState(5, state, function(err, lights) {\n    if (err) throw err;\n    displayResult(lights);\n});\n```\n\nThe __lightState__ object will ensure that the values passed into the various state functions are correctly bounded to avoid\nerrors when setting them. For example the color temperature value (which determines the white value) must be between 154 and 500. If you pass in a value outside of this range then the lightState function call will set it to the closest valid value.\n\nCurrently the __lightState__ object will combine together all the various state values that get set by the various function calls. This means that if you do create a combination of conflicting values, like __on__ and __off__ the last one set will be the actual value provided in the corresponding JSON object;\n\n```js\n// This will result in a JSON object for the state that sets the brightness to 100% but turn the light \"off\"\nstate = lightState.create().on().brightness(100).off();\n```\n\nWhen using __lightState__ it is currently recommended to create a new state object each time you want to build a new state, otherwise you will get a combination of all the previous settings as well as the new values.\n\n\n## Turning a Light On/Off using LightState\n\n```js\nvar hue = require(\"node-hue-api\"),\n    HueApi = hue.HueApi,\n    lightState = hue.lightState;\n\nvar displayResult = function(result) {\n    console.log(result);\n};\n\nvar displayError = function(err) {\n    console.error(err);\n};\n\nvar host = \"192.168.2.129\",\n    username = \"033a6feb77750dc770ec4a4487a9e8db\",\n    api = new HueApi(host, username),\n    state = lightState.create();\n\n// --------------------------\n// Using a promise\n\n// Set the lamp with id '2' to on\napi.setLightState(2, state.on())\n    .then(displayResult)\n    .fail(displayError)\n    .done();\n\n// Now turn off the lamp\napi.setLightState(2, state.off())\n\t.then(displayResult)\n    .fail(displayError)\n    .done();\n\n// --------------------------\n// Using a callback\n// Set the lamp with id '2' to on\napi.setLightState(2, state.on(), function(err, result) {\n\tif (err) throw err;\n\tdisplayResult(result);\n});\n\n// Now turn off the lamp\napi.setLightState(2, state.off(), function(err, result) {\n\tif (err) throw err;\n\tdisplayResult(result);\n});\n```\n\nIf the function call is successful, then you should get a response of ``true``. If the call fails then an ``ApiError``\nwill be generated with the failure details.\n\n\n## Setting Light States using custom JSON Object\nYou can pass in your own JSON object that contain the setting(s) that you wish to pass to the light via the bridge.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResult = function(result) {\n    console.log(result);\n};\n\nvar displayError = function(err) {\n    console.error(err);\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api;\n\napi = new HueApi(host, username);\napi.setLightState(2, {\"on\": true}) // provide a value of false to turn off\n    .then(displayResult)\n    .fail(displayError)\n    .done();\n```\n\nIf the function call is successful, then you should get a response of true. If the call fails then an ``ApiError`` will be generated with the failure details.\n\n\n## Getting the Current Status/State for a Light\nTo obtain the current state of a light from the Hue Bridge you can use the __lightStatus()__ function;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayStatus = function(status) {\n    console.log(JSON.stringify(status, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Obtain the Status of Light '5'\n\n// --------------------------\n// Using a promise\napi.lightStatus(5)\n    .then(displayStatus)\n    .done();\n\n// --------------------------\n// Using a callback\napi.lightStatus(5, function(err, result) {\n    if (err) throw err;\n    displayStatus(result);\n});\n```\n\nThis will produce a JSON object detailing the status of the lamp;\n```\n{\n  \"state\": {\n    \"on\": true,\n    \"bri\": 254,\n    \"hue\": 34515,\n    \"sat\": 236,\n    \"xy\": [\n      0.3138,\n      0.3239\n    ],\n    \"ct\": 153,\n    \"alert\": \"none\",\n    \"effect\": \"none\",\n    \"colormode\": \"ct\",\n    \"reachable\": true\n  },\n  \"type\": \"Extended color light\",\n  \"name\": \"Left Bedside\",\n  \"modelid\": \"LCT001\",\n  \"swversion\": \"65003148\",\n  \"pointsymbol\": {\n    \"1\": \"none\",\n    \"2\": \"none\",\n    \"3\": \"none\",\n    \"4\": \"none\",\n    \"5\": \"none\",\n    \"6\": \"none\",\n    \"7\": \"none\",\n    \"8\": \"none\"\n  }\n}\n```\n\n### Searching for New Lights\nWhen you have added new lights to the system, you need to invoke a search to discover these new lights to allow the Bridge\nto interact with them. The ``searchForNewLights()`` function will invoke a search for any new lights to be added to the\nsystem.\n\nWhen you invoke a scan for any new lights in the system, the previous search results are destroyed.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// --------------------------\n// Using a promise\napi.searchForNewLights()\n\t.then(displayResults)\n\t.done();\n\n// --------------------------\n// Using a callback\napi.searchForNewLights(function(err, result) {\n\tif (err) throw err;\n\tdisplayResults(result);\n});\n```\nThe result from this call should be ``true`` if a search was successfully triggered. It can take some time for the search\nto complete.\n\n### Obtaining Newly Discovered Lights\nOnce a search has been completed, then the newly discovered lights can be obtained using the ``newLights()`` call.\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// --------------------------\n// Using a promise\napi.newLights()\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.newLights(function(err, result) {\n    if (err) throw err;\n    displayResults(result);\n});\n```\nThe results from this call should be the new lights that were found during the previous search, and a ``lastscan`` value\nthat will be the date that the last scan was performed, which could be ``none`` if a search has never been performed.\n```\n{\n  \"lastscan\": \"2013-06-15T14:45:23\"\n}\n```\n\n### Naming Lights\nIt is possible to name a light using the ``setLightName()`` function;\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// --------------------------\n// Using a promise\napi.setLightName(5, \"A new Name\")\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.setLightName(5, \"Living Color TV\", function(err, result) {\n    if (err) throw err;\n    displayResults(result);\n});\n```\nIf the call is successful, then ``true`` will be returned by the function call, otherwise a ``ApiError`` will result.\n\n\n## Working with Groups\nThe Groups API for the Phillips Hue Bridge is not complete at this time, with some of API endpoints not officially\nsupported yet. This API does attempt to provide functions to invoke these end points, but in testing, some of them have\nbeen identified as being problematic, in that they report success, but nothing on the actual Bridge changes. In most of\nthese cases, restarting the Bridge (pulling the power cable) resulted in the calls working again for a short period of\ntime. Your mileage may vary if you are creating and modifying these newly created groups...\n\n### Obtaining all Groups from the Bridge\nTo obtain all the groups defined in the bridge use the __groups()__ function;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Obtain all the defined groups in the Bridge\n\n// --------------------------\n// Using a promise\napi.groups()\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.groups(function(err, result) {\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nThis will produce an array of values detailing the id and names of the groups;\n```\n[\n  {\n    \"id\": \"0\",\n    \"name\": \"All Lights\"\n  },\n  {\n    \"id\": \"1\",\n    \"name\": \"VRC 1\"\n  }\n]\n```\nThe \"All Lights\" Group is a special instance and will always exist and have the id of \"0\" as specified in the Hue Api\ndocumentation.\n\n\n### Obtaining the Details of a Group Definition\nTo obtain the details of the lights that make up a group (and some extra information like the last action that was performed)\nuse the __getGroup(id)__ function.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// --------------------------\n// Using a promise\napi.getGroup(0)\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.getGroup(0, function(err, result) {\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nWhich will return produce a result like;\n```\n{\n  \"id\": \"0\",\n  \"name\": \"All Lights\",\n  \"lights\": [\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\"\n  ],\n  \"lastAction\": {\n    \"on\": true,\n    \"bri\": 128,\n    \"hue\": 6144,\n    \"sat\": 254,\n    \"xy\": [\n      0.6376,\n      0.3563\n    ],\n    \"ct\": 500,\n    \"effect\": \"none\",\n    \"colormode\": \"ct\"\n  }\n}\n```\n\n### Setting the Light State for a Group\nA function ``setGroupLightState()`` exists for interacting with a group of lights to be able to set all the lights to a\nparticular state. This function is identical to that of the ``setLightState()`` function above, except that it works on\ngroups instead of a single light.\n\nIn the early versions of this library the group and individual lights were controlled via a single ``setLightState()``\nfunction, but this has been removed from version _0.2.x_ as it was not clear that a single boolean changed the target for the\nfunction invocation which felt wrong.\n\n\n### Updating a Group\nIt is possible to update the associated lights and the name of a group after it has been created on the bridge. The function\n``updateGroup()`` allows you to do this.\n\nYou can set the name, the lightIds or both with this function, just omit what you do not want to set, it will work out which\nparameter was passed based on type, a String for the name and an array for the light ids.\n\nWhen invoking this function ``true`` will be returned if the Bridge accepts the requested change, but under some circumstances\nif the group has just been created, then Bridge reports success, but does not actually change the configuration details. In these\ncases, a restart of the Bridge might resolve the issue.\n\nChanging the name of an existing group;\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Update the name of the group\n\n// --------------------------\n// Using a promise\napi.updateGroup(1, \"new group name\")\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.updateGroup(1, \"new group name\", function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nChanging the lights associated with an existing group;\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Update the lights in the group to ids 1, 2, and 3.\n\n// --------------------------\n// Using a promise\napi.updateGroup(1, [1, 2, 3])\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.updateGroup(1, [1, 2, 3], function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nChanging both the name and the lights for an existing group;\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Update both the name and the lights in the group to ids 4, 5.\n\n// --------------------------\n// Using a promise\napi.updateGroup(1, \"group name\", [4, 5])\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.updateGroup(1, \"group name\", [4, 5], function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\n\n### Create a New Group\nThe creation of groups is not officially supported in the released Hue API from Phillips (version 1.0). This has been\ntested on a Hue Bridge, but use at your own risk *(you may have to reset the bridge to factory defaults if something goes wrong)*.\n\nTo create a new group use the __createGroup(name, lightIds)__ function;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Create a new Group on the bridge\n\n// --------------------------\n// Using a promise\napi.createGroup(\"a new group\", [4, 5])\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.createGroup(\"group name\", [1, 4, 5], function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nThe function will return a promise with a result that contains the id of the newly created group;\n```\n{\n  \"id\": \"2\"\n}\n```\n\n\n### Deleting a Group\nThe deletion of groups is not officially supported in the released Hue API from Phillips (version 1.0), but it is still\npossible to delete groups, but use at your own risk *(you may have to reset the bridge to factory defaults if something\ngoes wrong)*.\n\nTo delete a group use the ``deleteGroup()`` function;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// Create a new Group on the bridge\n\n// --------------------------\n// Using a promise\napi.deleteGroup(3)\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.deleteGroup(4, function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\nThis function call will return a ``true`` result in the promise chain if successful, otherwise an error will be thrown.\n\n\n## Working with Schedules\n\n### Obtaining all the Defined Schedules\nTo obtain all the defined schedules on the Hue Bridge use the ``schedules()`` function.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username);\n\n// --------------------------\n// Using a promise\napi.schedules()\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.schedules(function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nThe function will return a promise that will provide an array of objects of ``id`` and ``name`` for each schedule;\n```\n[\n  {\n    \"id\": \"1\",\n    \"name\": \"Sample Schedule\"\n  },\n  {\n    \"id\": \"2\",\n    \"name\": \"Wake Up\"\n  }\n]\n```\n\n### Obtaining the details of a Schedule\nTo obtain the details of a schedule use the ``getSchedule(id)`` function;\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username),\n    scheduleId = 1;\n\n// --------------------------\n// Using a promise\napi.getSchedule(scheduleId)\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.getSchedule(scheduleId, function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nThe promise returned by the function will return the details of the schedule in the following format;\n```\n{\n  \"name\": \"Sample Schedule\",\n  \"description\": \"An example of a schedule\",\n  \"command\": {\n    \"address\": \"/api/08a902b95915cdd9b75547cb50892dc4/lights/5/state\",\n    \"body\": {\n      \"on\": true\n    },\n    \"method\": \"PUT\"\n  },\n  \"time\": \"2014-08-01T00:00:00\",\n  \"id\": 1\n}\n```\n\n### Creating a Schedule\nCreating a schedule requires just two elements, a time at which to trigger the schedule and the command that will be\ntriggered when the schedule is run.\nThere are other optional values of a name and a description that can be provided to make the schedule easier to identify.\n\nThere are two functions that can be invoked to create a new schedule (which are identically implemented);\n- ``scheduleEvent(event, cb)``\n- ``createSchedule(event, cb)``\n\nThese functions both take an object the wraps up the scheduled event to be created. There are only two required properties\nof the object, ``time`` and ``command``, with option properties ``name`` and ``description``.\n\n```js\nvar HueApi = require(\"node-hue-api\").HueApi;\n\nvar displayResults = function(result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username),\n    scheduledEvent;\n\nscheduledEvent = {\n    \"name\": \"Sample Schedule\",\n    \"description\": \"A sample scheduled event to switch on a light\",\n    \"time\": \"2013-12-24T00:00:00\",\n    \"command\": {\n        \"address\": \"/api/08a902b95915cdd9b75547cb50892dc4/lights/5/state\",\n        \"method\" : \"PUT\",\n        \"body\"   : {\n            \"on\": true\n        }\n    }\n};\n\n// --------------------------\n// Using a promise\napi.scheduleEvent(scheduledEvent)\n    .then(displayResults)\n    .done();\n\n// --------------------------\n// Using a callback\napi.createSchedule(scheduledEvent, function(err, result){\n    if (err) throw err;\n    displayResults(result);\n});\n```\n\nThe result returned by the promise when creating a new schedule will be that of the ``id`` for the newly created schedule;\n```\n{\n  \"id\": \"1\"\n}\n```\n\nThe ``command`` value must be a Hue Bridge API endpoint for it to correctly function, which means it must start with\n``/api/<valid username>/``. For now if using this function, you will have to use the exact API end point as specified in\nthe Phillips Hue REST API.\n\nTo help with building a schedule and to perform some basic checking to ensure that values are correct/valid there is a\nhelper module ``scheduleEvent`` which can be used the build a valid schedule object.\n\n### Using ScheduleEvent to build a Schedule\nThe ``scheduleEvent`` module/function is used to build up a schedule that the Hue Bridge can understand. It is not a\nrequirement when creating schedules, but can eliminate some of the basic errors that can result when creating a schedule.\n\nTo obtain a scheduleEvent instance;\n```js\nvar scheduleEvent = require(\"node-hue-api\").scheduledEvent;\n\nvar mySchedule = scheduleEvent.create();\n```\n\nThis will give you a schedule object that has the following functions available to build a schedule;\n- ``withName(String)`` which will set a name for the schedule (optional)\n- ``withDescription(String)`` which will set a description for the schedule (optional)\n- ``withCommand(command)`` which will set the command object that the schedule will run\n- ``on()``, ``at()``, ``when()`` which all take a string or Date value to specify the time the schedule will run, if\npassing a string it must be valid when parsed by ``Date.parse()``\n\nThe ``command`` object currently has to be specified as the Hue Bridge API documentation states which is of the form;\n```\n{\n\t\"address\": \"/api/08a902b95915cdd9b75547cb50892dc4/lights/5/state\",\n    \"method\" : \"PUT\",\n    \"body\"   : {\n    \t\"on\": true\n    }\n}\n```\nThe above example command will switch on the light with id ``5`` for the username ``08a902b95915cdd9b75547cb50892dc4``.\n\nIf you use the ``withCommand()`` function then the ``address`` will be undergo basic validation to ensure it is an\nendpoint for the Hue Bridge which is a common mistake to make when crafting your own values.\n\nOnce a scheduleEvent has been built it can be passEd directly to the ``createSchedule()``, ``scheduleEvent()`` or\n``updateSchedule()`` function calls in the Hue API.\n\nFor example to create a new schedule that will turn on the light with id 5 at 07:00 on the 25th December 2013;\n```js\nvar hue = require(\"node-hue-api\"),\n    HueApi = hue.HueApi,\n    scheduleEvent = hue.scheduledEvent;\n\nvar displayResult = function (result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username),\n    mySchedule;\n\nmySchedule = scheduleEvent.create()\n    .withName(\"Xmas Day Wake Up\")\n    .withDescription(\"Like anyone really needs a wake up on Xmas day...\")\n    .withCommand(\n    {\n        \"address\": \"/api/08a902b95915cdd9b75547cb50892dc4/lights/5/state\",\n        \"method\" : \"PUT\",\n        \"body\"   : {\n            \"on\": true\n        }\n    })\n    .on(\"2013-12-25T07:00:00\");\n\n// --------------------------\n// Using a promise\napi.createSchedule(mySchedule)\n    .then(displayResult)\n    .done();\n\n// --------------------------\n// Using a callback\napi.createSchedule(mySchedule, function(err, result) {\n    if (err) throw err;\n    displayResult(result);\n});\n```\n\n\n### Updating a Schedule\nYou can update an existing schedule using the ``updateSchedule()`` function;\n\n```js\nvar hue = require(\"node-hue-api\"),\n    HueApi = hue.HueApi,\n    scheduleEvent = hue.scheduledEvent;\n\nvar displayResult = function (result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username),\n    scheduleId = 1,\n    updatedValues;\n\nupdatedValues = {\n    \"name\": \"Updated Name\",\n    \"time\": \"January 1, 2014 07:00:30\"\n};\n\n// --------------------------\n// Using a promise\napi.updateSchedule(scheduleId, updatedValues)\n    .then(displayResult)\n    .done();\n\n// --------------------------\n// Using a callback\napi.updateSchedule(scheduleId, updatedValues, function(err, result) {\n    if (err) throw err;\n    displayResult(result);\n});\n```\n\nThe result from the promise will be an object with the properties of the schedule that were updated and ``true`` as the\nvalue of each one that was successful.\n```\n{\n  \"name\": true,\n  \"time\": true\n}\n```\n\n\n### Deleting a Schedule\nAll schedules in the Hue Bridge are removed once they are triggered. To remove an impending schedule use the ``deleteSchedule()``\nfunction;\n\n```js\nvar hue = require(\"node-hue-api\"),\n    HueApi = hue.HueApi;\n\nvar displayResult = function (result) {\n    console.log(JSON.stringify(result, null, 2));\n};\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    api = new HueApi(host, username),\n    scheduleId = 1;\n\n// --------------------------\n// Using a promise\napi.deleteSchedule(scheduleId)\n    .then(displayResult)\n    .done();\n\n// --------------------------\n// Using a callback\napi.deleteSchedule(scheduleId, function(err, result) {\n    if (err) throw err;\n    displayResult(result);\n});\n```\n\nIf the deletion was successful, then ``true`` will be returned from the promise, otherwise an ``ApiError`` will be thrown,\nas in the case if the schedule does not exist.\n\n\n## Advanced Options\n\nIf there are issues with the Bridge not responding in time for a result of error to be delivered, then you\nmay need to tweak the timeout settings for the API. When this happens you will get an\n`ETIMEOUT` error.\n\nThe way to set a maximum timeout when interacting with the bridge is done when you instantiate the ``HueApi``.\n\n```js\nvar hue = require(\"node-hue-api\"),\n    HueApi = hue.HueApi;\n\nvar host = \"192.168.2.129\",\n    username = \"08a902b95915cdd9b75547cb50892dc4\",\n    timeout = 20000 // timeout in milliseconds\n    api;\n\napi = new HueApi(host, password, timeout);\n```\n\nThe default timeout, when onw is not specified will be 10000ms (10 seconds). This is usually enough time for the bridge\nto respond unless you are returning a very large result (like the complete state for the bridge in a large installation)\n\n\n## License\nCopyright 2013. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this library except in compliance with the License.\n\nYou may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>.\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
  "readmeFilename": "README.md",
  "description": "An API library for Node.js that interacts with the Philips Hue Bridge to control Philips Hue Light Bulbs and Philips Living Color Lamps.",
  "homepage": "https://github.com/maxschremser/ambilight"
}
